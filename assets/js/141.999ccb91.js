(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{499:function(a,t,s){"use strict";s.r(t);var e=s(1),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[a._v("#")]),a._v(" 介绍")]),a._v(" "),t("h3",{attrs:{id:"图的密度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图的密度"}},[a._v("#")]),a._v(" 图的密度")]),a._v(" "),t("p",[a._v("图的密度表示图中存在的边与图可包含的最大边数之间的比率。从概念上讲，它提供了一个关于一个图在边的连接（edge connectivity）方面的密度的概念。当我们有一个庞大的网络并想在网络中添加新的边时，它特别有用。此外，图的密度让我们了解到我们还能在网络中增加多少条边。")]),a._v(" "),t("p",[a._v("现在，在推导图密度的公式之前，让我们谈谈如何计算一个简单的有向图和无向图中的最大边数。让我们看一下一个简单的无向图 G1:")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cdn.staticaly.com/gh/jonsam-ng/image-hosting@master/2022/image.jk183w6ts7c.webp",loading:"lazy"}})]),a._v(" "),t("p",[a._v("现在，我们要推导出一个标准的公式来计算一个简单的无向图中的最大边数:")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cdn.staticaly.com/gh/jonsam-ng/image-hosting@master/2022/image.11lp6lg5uvq8.webp",loading:"lazy"}})]),a._v(" "),t("p",[a._v("同样地，我们可以用有向图中的两条双向边来代替每条无向边。因此，最大的边数可以用类似的公式来计算：")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cdn.staticaly.com/gh/jonsam-ng/image-hosting@master/2022/image.2a18wh6v5uhw.webp",loading:"lazy"}})]),a._v(" "),t("p",[a._v("我们现在可以定义图形密度公式。图中存在的边除以该图可包含的最大边数。让我们看看一个简单无向图的公式:")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cdn.staticaly.com/gh/jonsam-ng/image-hosting@master/2022/image.75ynd1vyx0o0.webp",loading:"lazy"}})]),a._v(" "),t("p",[a._v("同样地，我们可以为有向图重写前面的密度公式:")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cdn.staticaly.com/gh/jonsam-ng/image-hosting@master/2022/image.2jroi5h8m100.webp",loading:"lazy"}})]),a._v(" "),t("p",[a._v("对于一个完全有向或无向图，密度总是 1。在一个完全有向图或无向图的情况下，它已经有最大数量的边，我们不能再增加任何边。此外，它还表明该图是完全密集的（fully dense）。")]),a._v(" "),t("p",[a._v("一个具有所有孤立顶点的图的密度为 0。 此外，它表示图中没有边，可以添加到图中的边的数量等于最大可添加的边的数量。")]),a._v(" "),t("h2",{attrs:{id:"实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[a._v("#")]),a._v(" 实现")]),a._v(" "),t("h3",{attrs:{id:"javascript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[a._v("#")]),a._v(" JavaScript")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/*\nThe density of a network is a measure of how many edges exist proportional to\nhow many edges would exist in a complete network (where all possible edges).\nhttps://networkx.org/documentation/networkx-1.9/reference/generated/networkx.classes.function.density.html\n*/")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("density")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("numberOfNodes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" numberOfEdges"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" isDirected "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" multi "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" isDirected "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("multi "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" numberOfEdges"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("numberOfNodes "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("numberOfNodes "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.baeldung.com/cs/graph-density",target:"_blank",rel:"noopener noreferrer"}},[a._v("Graph Density | Baeldung on Computer Science"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);